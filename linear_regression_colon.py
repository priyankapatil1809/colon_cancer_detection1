# -*- coding: utf-8 -*-
"""Linear_Regression_Colon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aON7-gFG0iy8_YH09aY7w9Ng4NWl0r_8
"""

from google.colab import drive

drive.mount('/content/drive',timeout_ms=60000)

"""Step 1: Import Libraries"""

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from skimage.feature import hog, local_binary_pattern
from skimage import color
from skimage import exposure
import seaborn as sns
import matplotlib.pyplot as plt

"""Step 2: Load and Prepare Dataset"""

# Define your dataset directory
dataset_dir = '/content/drive/MyDrive/Colon_use'

# Initialize empty lists for images and labels
images = []
labels = []

# Define a mapping of class labels to integers
class_to_int = {'cancer_y': 0, 'cancer_n': 1}

# Loop through your dataset directory to load images and labels
for category in os.listdir(dataset_dir):
    category_dir = os.path.join(dataset_dir, category)
    for img_filename in os.listdir(category_dir):
        img_path = os.path.join(category_dir, img_filename)
        img = cv2.imread(img_path)
        img = cv2.resize(img, (256, 256))  # Resize images to a common size
        images.append(img)  # Keep color images
        labels.append(class_to_int[category])  # Map class labels to integers

# Convert lists to NumPy arrays
images = np.array(images)
labels = np.array(labels)

"""Step 3: Feature Extraction Functions"""

def extract_hog_features(image):
    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    features = hog(image_gray, pixels_per_cell=(16, 16), cells_per_block=(2, 2), visualize=False)
    return features

def extract_lbp_features(image):
    radius = 3
    n_points = 24
    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    lbp_image = local_binary_pattern(image_gray, n_points, radius, method='uniform')
    lbp_histogram, _ = np.histogram(lbp_image.ravel(), bins=np.arange(0, n_points + 3), range=(0, n_points + 2))
    lbp_histogram = lbp_histogram / (lbp_histogram.sum() + 1e-6)  # Normalize
    return lbp_histogram

def extract_color_histogram(image):
    hist = cv2.calcHist([image], [0, 1, 2], None, [8, 8, 8], [0, 256, 0, 256, 0, 256])
    hist = hist.flatten()
    hist = hist / (hist.sum() + 1e-6)  # Normalize
    return hist

"""Step 4: Extract Features from Images"""

# Extract features from images
color_hist_features_train = np.array([extract_color_histogram(img) for img in images])
hog_features_train = np.array([extract_hog_features(img) for img in images])
lbp_features_train = np.array([extract_lbp_features(img) for img in images])
rgb_features_train = images.reshape(images.shape[0], -1)  # Flatten RGB images

X_train = np.hstack((color_hist_features_train, hog_features_train, lbp_features_train, rgb_features_train))
y_train = labels

"""Step 5: Train-Test Split and Standard Scaling"""

# Train-test split and standard scaling
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""Step 6: Linear Regression"""

# Linear Regression
linear_reg_model = LinearRegression()
linear_reg_model.fit(X_train, y_train)

"""Step 7: Predictions and Evaluation Metrics"""

# Predictions
y_pred_linear_reg = linear_reg_model.predict(X_test)

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred_linear_reg)
r2 = r2_score(y_test, y_pred_linear_reg)

print("\nResults for Linear Regression:")
print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

"""Step 8: Visualization"""

# Visualization (you can customize this part based on your needs)
plt.scatter(y_test, y_pred_linear_reg)
plt.xlabel("True Values")
plt.ylabel("Predictions")
plt.title("Linear Regression Predictions vs True Values")
plt.show()

"""Step 9: Additional Results and Diagnostics"""

# Residual Analysis
residuals = y_test - y_pred_linear_reg

# Plotting Residuals
plt.figure(figsize=(8, 6))
plt.scatter(y_test, residuals)
plt.axhline(y=0, color='r', linestyle='--', linewidth=2)
plt.xlabel("True Values")
plt.ylabel("Residuals")
plt.title("Residuals Analysis")
plt.show()

# Distribution of Residuals
plt.figure(figsize=(8, 6))
sns.histplot(residuals, bins=30, kde=True)
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.title("Distribution of Residuals")
plt.show()